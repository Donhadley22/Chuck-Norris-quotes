name: CI/CD Pipeline for Node.js App

on:
  push:
    branches:
      - main

jobs:
  # 1. Run Unit Tests
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test  # Ensure you have a test script in package.json

  # 2. Apply Terraform and Capture EC2 IP/DNS
  terraform:
    name: Apply Terraform and Capture EC2 IP/DNS
    runs-on: ubuntu-latest
    needs: test  # Run this job only after tests pass

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture EC2 Public IP from Terraform
        id: ec2_output
        run: |
          echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV
          echo "EC2_PUBLIC_DNS=$(terraform output -raw ec2_public_dns)" >> $GITHUB_ENV

      - name: Set EC2_HOST as GitHub Secret
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh secret set EC2_HOST --body "$EC2_PUBLIC_IP"

  # 3. Build Docker Image and Push to Docker Hub
  build:
    name: Build and Push Docker Image
    needs: terraform  # Only run after the Terraform job is successful
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest

  # 4. SSH into EC2 and Deploy Docker Container
  deploy:
    name: Deploy to EC2
    needs: build  # Only run after the build job is successful
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy Docker Container to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            docker pull ${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest
            docker stop nodejs-app || true
            docker rm nodejs-app || true
            docker run -d -p 80:3000 --name nodejs-app ${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest
          EOF
