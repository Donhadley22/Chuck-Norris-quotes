name: CI/CD Pipeline for Node.js App

on:
  push:
    branches:
      - main

jobs:
  # 1. Run Unit Tests
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test  # Ensure you have a test script in package.json

  # 2. Apply Terraform and Capture EC2 IP/DNS
  terraform:
    name: Apply Terraform and Capture EC2 IP/DNS
    runs-on: ubuntu-latest
    needs: test  # Run this job only after tests pass

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      # Set up AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Change directory to where the Terraform configuration files are
      - name: Change directory to Terraform
        run: cd terraform

      # Run Terraform Init
      - name: Terraform Init
        run: terraform init

      # Run Terraform Plan
      - name: Terraform Plan
        run: terraform plan

      # Run Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve

      # Capture EC2 Public IP and DNS from Terraform
      - name: Capture EC2 Public IP and DNS from Terraform
        id: ec2_output
        run: |
          echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV
          echo "EC2_PUBLIC_DNS=$(terraform output -raw ec2_public_dns)" >> $GITHUB_ENV

  # 3. Build Docker Image and Push to Amazon ECR
  build:
    name: Build and Push Docker Image to Amazon ECR
    needs: terraform  # Only run after the Terraform job is successful
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Build the Docker image
      - name: Build Docker Image
        run: |
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          docker build -t my-app:$IMAGE_TAG .
          docker tag my-app:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:$IMAGE_TAG
          docker tag my-app:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:latest

      # Push the Docker image to Amazon ECR
      - name: Push Docker Image to Amazon ECR
        run: |
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:latest

  # 4. SSH into EC2 and Deploy Docker Container
  deploy:
    name: Deploy to EC2
    needs: build  # Only run after the build job is successful
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy Docker Container to EC2
        run: |
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.EC2_PUBLIC_IP }} << 'EOF'
            set -e
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:$IMAGE_TAG
            docker stop nodejs-app || true
            docker rm nodejs-app || true
            docker run -d -p 80:3000 --name nodejs-app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:$IMAGE_TAG
          EOF
